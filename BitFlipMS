
namespace Microsoft.Microsoft_Quantum.Correcting_BitFlip_Errors {
    open Microsoft.Quantum.Primitive;
    open Microsoft.Quantum.Canon;
    open Microsoft.Quantum.Extensions.Math;
   
   // one qubit information encoded into 3 qubits and 2 aux qubits in state |00〉for reference 
   operation EncodeIntoBitFlipCode(
            data : Qubit, auxillaryQubits : Qubit[]
        ) : ()
    {
        body {
     
            // CNOT applied to entangle to data qubits 
            ApplyToEachCA(CNOT(data, _), auxillaryQubits);
        }

       // decoding is the adjoint of encoding so use Adjoint function 
        adjoint auto
        controlled auto
        controlled adjoint auto
    }
    ///////// Learning error information without knowing state of qubit /////////
    
    // checking parity of errors and seeing if values return positive 
    operation CheckBitFlipCodeStateParity() : () {
        body {
            //initialize qubit register 
            using (register = Qubit[3]) {

                let data = register[0];
                let auxillaryQubits = register[1..2];
                // prepares qubits in rotation on x-axis 
                Rx(PI() / 3.0, data);

                // encode state 
                EncodeIntoBitFlipCode(data, auxillaryQubits);

                // measuring Z₀Z₁ and Z₁Z₂ to check for what values +/- is returned for parity to distinguish which error has occured without cheching state of qubit 
                Assert(
                    [PauliZ; PauliZ; PauliI], register, Zero, "Z₀Z₁ was One!"
                );
                Assert(
                    [PauliI; PauliZ; PauliZ], register, Zero, "Z₁Z₂ was One!"
                );

                // applying measurement 

                let parity01 = Measure([PauliZ; PauliZ; PauliI], register);
                let parity12 = Measure([PauliI; PauliZ; PauliZ], register);

               // inverse to decoding to check if the state of qubit is perserved 
                (Adjoint EncodeIntoBitFlipCode)(data, auxillaryQubits);
                (Adjoint Rx)(PI() / 3.0, data);
                Assert([PauliZ], [data], Zero, "Didn't return to |0〉!");
            }
        }
    }

    
